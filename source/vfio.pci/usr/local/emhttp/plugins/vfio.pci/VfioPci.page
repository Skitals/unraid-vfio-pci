Menu="Utilities"
Title="VFIO-PCI Config"
Icon="microchip"
---
<style>
table.vfio thead tr:first-child td{font-size:1.1rem;text-transform:uppercase;letter-spacing:1px;}
table.vfio thead tr:last-child{border-bottom:1px solid #2b2b2b}
.usb { padding-left:50px; }
tr.checked { background-color: #c6eac5; color:#000; }
textarea { width:90%; }
div.desc { padding-left:50px; padding-right:50px; padding-bottom:75px; }
</style>
<?php 

if (is_file("/boot/config/vfio-pci.cfg")) {
	$file = file_get_contents("/boot/config/vfio-pci.cfg");
}

if (is_file("/tmp/reboot_notifications")) {
        $file2 = file_get_contents("/tmp/reboot_notifications");
	if (strpos($file2, "VFIO-PCI Config") !== false) {
		$reboottrue = 1;
	}
}

$pci = array();
exec("sh /usr/local/emhttp/plugins/vfio.pci/scripts/getiommu.sh", $output, $return_var );
foreach($output as $item) {
	$iommu = substr($item, 0, 2);
	$reset = substr($item, +3, 1);
	$device = substr($item, +5, 7);
	$id = substr($item, +13,9);
	$desc = substr($item, +23);
	$pci["$iommu"]["$device"] = array( "reset" => "$reset", "id" => "$id", "desc" => "$desc" );
}

?>
<div class="desc">
<b>Instructions:</b> Select the devices to add to vfio-pci.cfg. This binds the device, by address, to the vfio-pci driver at startup. Bound devices will be available to pass through to your VMs under "Other PCI Devices" in the Edit VM Form View (except for Sound Cards and Graphics Cards, which will still be listed under their corresponding drop-down).
<br><br>
<b>Note:</b> If you add/remove/move PCI devices in your server the addresses are likely to change. You will need to update this form (or manually edit /boot/config/vfio-pci.cfg) whenever you make hardware changes.
<br><br>
<b>Note:</b> This method of binding binds everything in the IOMMU group. For example, if an IOMMU group contains 3 devices and you only select one, all 3 devices will be bound to vfio. 
</div>

<form id="vfiopci" onsubmit="return false">
<table class="vfio">
<thead>
<tr><td>IOMMU</td><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Address</td><td>Reset</td><td>Vendor ID</td><td>Description</td></tr>
</thead>
<tbody>
<?php
$norepeat = array();
foreach($pci as $iommu => $address) {
        foreach($address as $pciaddress => $array) {
		if (strpos($file, $pciaddress) !== false) {
                	echo "<tr class=\"checked\">";
		} else {
			echo "<tr>";
		}
		echo "<td>";
		if (!in_array("$iommu",$norepeat)) {
			$str = (int)($iommu);
			echo "Group $str";
		}
		echo "</td>";
		if (strpos($file, $pciaddress) !== false) {
        		echo "<td><input type=\"checkbox\" name=\"address\" value=\"$pciaddress\" checked> $pciaddress</td>";
		} else {
			echo "<td><input type=\"checkbox\" name=\"address\" value=\"$pciaddress\"> $pciaddress</td>";
		}
        	echo "<td>";
		if ($pci[$iommu][$pciaddress]['reset'] == "1") {
			echo "[RESET]";
		}
		echo "</td>";
                echo "<td>" . $pci[$iommu][$pciaddress]['id'] . "</td>";
                echo "<td>" . $pci[$iommu][$pciaddress]['desc'] . "</td>";
		echo "</tr>";
		if (strpos($pci[$iommu][$pciaddress]['desc'], 'USB') !== false) {
			if (strpos($file, $pciaddress) !== false) {
				echo "<tr><td></td><td></td><td></td><td></td><td class=\"usb\">";
				echo "*USB devices attached to controllers bound to vfio are not visible to unRAID*";
				echo "</td></tr>";
			} else {
				echo "<tr><td></td><td></td><td></td><td></td><td class=\"usb\">";
				echo "USB devices attached to this controller:";
				echo "</td></tr>";
			}
			exec("sh /usr/local/emhttp/plugins/vfio.pci/scripts/getusb.sh $pciaddress", $output1, $return_var1);
			foreach($output1 as $item1) {
				echo "<tr><td></td><td></td><td></td><td></td><td class=\"usb\">";
				echo $item1;
				echo "</td></tr>";
			}
			unset($output1);
		}
		$norepeat[] = $iommu;
        }
}
?>
</tbody>
</table>
<input id="buildcfg" type="submit" value="Build vfio-pci.cfg" onclick="buildCfg();" <?php if ($reboottrue) { echo "disabled"; } ?>><input id="savecfg" type="submit" value="Save" onclick="saveCfg();" disabled><input id="undocfg" type="submit" value="Undo" onclick="undoCfg();" <?php if (!$reboottrue) { echo "disabled"; } ?>><span id="warning"></span>
</form>

<textarea id="vfio-pci-cfg" disabled><?php echo $file; ?></textarea>

<script>
$(function() {
	if ( typeof caPluginUpdateCheck === "function" ) {
		caPluginUpdateCheck("vfio.pci.plg",{name:"VFIO-PCI Config"});
	}
});

$("input[type='checkbox']").change(function() {
	if(this.checked) {
		this.closest('tr').className = "checked";
	} else {
		this.closest('tr').className = "";
	}
});

function buildCfg() {
	var string = "BIND=";
	var elements = document.getElementById("vfiopci").elements;
	for (var i = 0, element; element = elements[i++];) {
		if (element.type === "checkbox"  && element.checked === true)
        	string = string + element.value + " ";
	}
	string = string.trim();
	if (string !== "BIND=") {
		document.getElementById("vfio-pci-cfg").innerHTML = string;
	} else {
		document.getElementById("vfio-pci-cfg").innerHTML = "";
	}
		document.getElementById("savecfg").disabled = false;
		document.getElementById("warning").innerHTML = "<b>WARNING: Changes not saved. Review preview below and hit Save!</b>";
}

function saveCfg() {
	var cfg = document.getElementById("vfio-pci-cfg").innerHTML;
	if (typeof addRebootNotice === "function") { var careboot = "yes"; } else { var careboot = "no"; }
	$.get( "/plugins/vfio.pci/scripts/save.php", { cfg: cfg, careboot: careboot } )
	.done(function( data ) {
		alert( data );
		document.getElementById("warning").innerHTML = "<b>ALERT: Changes saved. Reboot to take effect.</b>";
		if (typeof addRebootNotice === "function") {
			addRebootNotice("VFIO-PCI Config: A Reboot Is Required For Changes To Take Effect");
		} else {
			if (typeof addBannerWarning === "function") {
				addBannerWarning("A Reboot Is Required For Changes To Take Effect");
			}
		}
		document.getElementById("savecfg").disabled = true;
		document.getElementById("buildcfg").disabled = true;
		document.getElementById("undocfg").disabled = false;
	});
}

function undoCfg() {
        $.get( "/plugins/vfio.pci/scripts/undo.php", { } )
        .done(function( data ) {
		location.reload();
        });
}
</script>
